-- ВЫПУСКАЙТЕ КРЯКЕНА (если что-то сломалось очисти это что-то)

DROP TABLE IF EXISTS film_like;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS mpa;

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    login VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(100),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER generated BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa_name varchar(20) UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name VARCHAR(100) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa INTEGER REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER generated BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name VARCHAR(65) UNIQUE
);

CREATE TABLE IF NOT EXISTS film_like (
        film_id INTEGER,
        user_like INTEGER,
    	CONSTRAINT film_like_PK PRIMARY KEY (user_like, film_id),
    	CONSTRAINT film_like_FK FOREIGN KEY (user_like) REFERENCES users (user_id)
    	ON DELETE CASCADE ON UPDATE CASCADE,
    	CONSTRAINT film_like_FK_1 FOREIGN KEY (film_id) REFERENCES films(film_id)
    	ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER,
    genre_id INTEGER,
    	CONSTRAINT film_genre_PK PRIMARY KEY (film_id, genre_id),
    	CONSTRAINT film_genre_FK FOREIGN KEY (film_id) REFERENCES films (film_id)
    	ON DELETE CASCADE ON UPDATE CASCADE,
    	CONSTRAINT film_genre_FK_1 FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
    	ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users (user_id),
    friend_id INTEGER REFERENCES users (user_id),
    CONSTRAINT validate_request CHECK (user_id <> friend_id)
);