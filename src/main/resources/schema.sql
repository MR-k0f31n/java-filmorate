-- ВЫПУСКАЙТЕ КРЯКЕНА (если что-то сломалось очисти это что-то)

DROP TABLE IF EXISTS film_like;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS mpa;

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(100) NOT NULL UNIQUE,
    login VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(100),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER generated by default as identity PRIMARY KEY,
    mpa_name varchar(20) UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR (100) NOT NULL UNIQUE,
    description VARCHAR (200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    genre INTEGER,
    user_like INTEGER,
    mpa INTEGER REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER generated by default as identity PRIMARY KEY,
    genre_name varchar(65) UNIQUE
);

--ALTER TABLE films ADD CONSTRAINT film_mpa FOREIGN KEY (mpa) REFERENCES mpa (mpa_id);

CREATE TABLE IF NOT EXISTS film_like (
        film_id INTEGER REFERENCES films (film_id),
        user_like INTEGER REFERENCES users (user_id),
        PRIMARY KEY (film_id, user_like)
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER REFERENCES films (film_id),
    genre_id INTEGER REFERENCES genres (genre_id),
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users (user_id),
    friend_id INTEGER REFERENCES users (user_id),
    PRIMARY KEY (user_id, friend_id)
);